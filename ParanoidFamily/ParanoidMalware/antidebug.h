#pragma once

/*
	references: http://www.veracode.com/blog/2008/12/anti-debugging-series-part-ii/
				http://msdn.microsoft.com/en-us/library/windows/desktop/ms680345(v=vs.85).aspx
				http://msdn.microsoft.com/en-us/library/windows/desktop/aa363362(v=vs.85).aspx
				http://www.codeproject.com/Articles/29469/Introduction-Into-Windows-Anti-Debugging
*/
class antidebug
{
public:
	antidebug(void);
	~antidebug(void);

	void startDetect();
	int debuggerPresent;

private:
	void isDebuggerPresent();
	void BeDebugged(); // silent version of isdebuggerpresnt
	void isCheckRemoteDebuggerPresent();
	void isOutputDebugString();
	void isOutputDebugStringCrash(); // ollydbg specific
	void isProcessDebugPort();
	void detachDebugger();
	void findWindows();
	void checkNtGlobalFlag();
	void isSystemKernelDebuggerInformation();
	void selfDebug();
	void unHandledExceptionFilter();
	void isSeDebugPrivilege();
	void blockInput();
	void multipleDesktop();
	void debuggerPrefixCheck();
	void checkHeapflags();

	void checkProcess();
	void checkRegistry();
	void checkFile();

	void doMaliciousStuff();

};

