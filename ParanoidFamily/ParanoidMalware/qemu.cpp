#include "qemu.h"
#include "Helper.h"

qemu::qemu(void)
{
}


qemu::~qemu(void)
{
}

void qemu::startDetect(){
	printf("========= Checks for QEMU =======\n");
	printf("Registry check.\n");
	checkRegistry();
	printf("\n");
}

void qemu::checkRegistry(){
	Helper h;
	wstring checkString[] = {wstring(L"qemu")};
	if(h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 3\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)){
		printf("QEMU Registry: QEMU Virtual hardware exists.\n");
	}
}

void qemu::IRETD(){
//	unsigned int handler = (unsigned int) seh_handler;
		/*__asm("movl %0, %%eax\n\t"
		"pushl %%eax\n\t"::
		"r" (handler) "%eax");

		__asm("pushl %fs:0\n\t"
		"movl %esp, %fs:0\n\t");

		__asm(".byte 0x26, 0xcf");

		__asm("movl %esp, %eax");
		__asm("movl %eax, %fs:0");
		__asm("addl $8, %esp");*/

}

int seh_handler(struct _EXCEPTION_RECORD 
             *exception_record, 
                void *established_frame, 
                struct _CONTEXT *context_record, 
                void *dispatcher_context) 
{ 
        printf("Malicious code here.\n"); 
        exit(0); 
}