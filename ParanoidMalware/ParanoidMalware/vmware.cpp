#include "vmware.h"


vmware::vmware(void)
{
}


vmware::~vmware(void)
{
}

void vmware::startDetect(){
	printf("========= Checks for VMWARE =======\n");
	printf("Instruction Checks\n");
	sidt();
	sldt();
	smsw();
	str();
	in();
	printf("\n");

	printf("Process Checks\n");
	checkProcess();
	printf("\n");
	
	printf("Registry Checks\n");
	checkRegistry();
	printf("\n\n");
	
	printf("File Checks\n");
	checkFile();
	printf("\n\n");

	printf("MAC Checks\n");
	checkMAC();
	printf("\n");
}

void vmware::sidt(){
	unsigned char	idtr[6];
	unsigned long	idt	= 0;

	_asm sidt idtr
	idt = *((unsigned long *)&idtr[2]);

	if 	((idt >> 24) == 0xff)
		printf("SIDT(): VM detected\n");
}

void vmware::sldt() {
	unsigned char   ldtr[5] = "\xef\xbe\xad\xde";
	unsigned long   ldt			= 0;

	_asm sldt ldtr
	ldt = *((unsigned long *)&ldtr[0]);

	if (ldt != 0xdead0000)
		printf("SLDT(): VM detected\n");
}

void vmware::str() {
	unsigned char	mem[4] = {0, 0, 0, 0};

	__asm str mem;

	if ((mem[0] == 0x00) && (mem[1] == 0x40))
		printf ("STR(): VM detected\n");
}

void vmware::smsw() {
    unsigned int reax = 0;

    __asm
    {
        mov eax, 0xCCCCCCCC;
        smsw eax;
        mov DWORD PTR [reax], eax;
    }

	if ( (( (reax >> 24) & 0xFF ) == 0xcc) 
		&& (( (reax >> 16) & 0xFF ) == 0xcc))
        printf("SMSW(): VM detected\n");
}

// TO CHECK NOT RUNNING
int vmware::redpill(){
	unsigned char m[2+4], rpill[] = "\x0f\x01\x0d\x00\x00\x00\x00\xc3";
    *((unsigned*)&rpill[3]) = (unsigned)m;
    ((void(*)())&rpill)();

	return (m[5]>0xd0) ? 1 : 0;
}

void vmware::in() {
	unsigned int magicNumber, check;

	__try {
		__asm {
			push eax			
			push ebx
			push ecx
			push edx

			mov eax, 'VMXh'
			mov ecx, 0Ah
			mov dx, 'VX'			
			in eax, dx
			mov magicNumber, ebx 
			mov check, ecx

			pop edx
			pop ecx
			pop ebx
			pop eax
		}
	} __except (EXCEPTION_EXECUTE_HANDLER) {}

	if (magicNumber == 'VMXh')
		printf("IN(): VM detected\n");
}

// CHECK FOR RUNNING PROCESS
void vmware::checkProcess(){
	Helper h;
	if(h.isProcessExists("vmacthlp.exe")){
		printf("VM: vmacthlp.exe exists\n");
	}
	if(h.isProcessExists("vmtoolsd.exe")){
		printf("VM: vmtoolsd.exe exists\n");
	}
	if(h.isProcessExists("vmwaretray.exe")){
		printf("VM: vmtooltray.exe exists\n");
	}
}

// TODO
void vmware::checkRegistry(){
	Helper h;

	if(h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\VMWare\\VMTools"))
		||h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\VMWare, Inc.\\VMware Tools"))){
		printf("VM Registry: VMTools exists.\n");
	}

	if(h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmci"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmhgfs"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmmouse"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmusbmouse"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmxnet"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\Services\\vmtools"))){
		printf("VM Registry: Drivers exists.\n");
	}

	wstring checkString[] = {wstring(L"vmware")};
	if(h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\ControlSet001\\Services\\Disk\\Enum\\"), TEXT("0"), checkString, 1)){
			printf("VM Registry: Services exists.\n");
	}

	if(h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 0\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 1\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 2\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)
		|| h.isRegistryValue(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DEVICEMAP\\Scsi\\Scsi Port 3\\Scsi bus 0\\Target Id 0\\Logical Unit Id 0"), TEXT("Identifier"), checkString, 1)){
		printf("VM Registry: VM Virtual hardware exists.\n");
	}
	/*
	if(h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\services\\vmci"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\services\\vmhgfs"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SYSTEM\\CurrentControlSet\\services\\VMMEMCTL"))
		|| h.isRegistryKeyExists(HKEY_LOCAL_MACHINE, TEXT("SOFTWARE\\VMWare, Inc.\\VMware Tools"))){
		registryKey = 1;
	}*/


	//HKLM\SYSTEM\CurrentControlSet\Services

	//HKLM\HARDWARE\DEVICEMAP\Scsi\Scsi Port *x*\Scsi Bus 0\Target Id 0\Logical Unit Id 0

	//HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Reinstall\0000



}

void vmware::checkFile(){
	Helper h;
	std::string driverPath = "C:\\Windows\\system32\\drivers\\";
	
	// Get Program File Path
	TCHAR progFilePath[MAX_PATH];
	SHGetFolderPath(NULL, CSIDL_PROGRAM_FILES, NULL, 0, progFilePath);
	std::string programFiles = getenv("ProgramFiles");
	
	// convert to string
	std::wstring arr_w( progFilePath );
	std::string arr_s( arr_w.begin(), arr_w.end() );
	arr_s +="\\";
	
	//C:\Program Files\VMware\VMware Tools
	string vmPath = arr_s + "VMware\\VMware Tools\\";
	string vmPath2 = arr_s + "Common Files\\VMware\\Drivers\\memctl\\";

	h.isFileExists(driverPath + "vmmouse.sys");
	h.isFileExists(driverPath + "vmx_svga.sys");
	h.isFileExists(driverPath + "vmusbmouse.sys");
	h.isFileExists(driverPath + "vmscsi.sys");
	h.isFileExists(driverPath + "vmci.sys");
	h.isFileExists(driverPath + "vmhgfs.sys");
	h.isFileExists(driverPath + "vmxnet.sys");
	h.isFileExists(vmPath + "vmacthlp.exe");
	h.isFileExists(vmPath + "vmtoolsd.exe");
	h.isFileExists(vmPath2 + "vmmemctl.sys");
}

void vmware::checkMAC(){
	Helper h;
	// to demonstrate some format (so later on can try to detect them)
	h.isStartWithMac("00-0C-29");
	h.isStartWithMac("000C29");
	h.isStartWithMac("00:0C:29");
}